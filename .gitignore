 #include<stdio.h>
 #include<stdlib.h>
 #include<conio.h>
  struct node {
        int data;
        struct node *prev, *next;
  };

  struct node *head = NULL, *tail = NULL;

  struct node *createNode(int);
  void insertNode(int);
  void deleteNode(int);
  void traverse();

  struct node* createNode(int data) {
        struct node *newnode = (struct node *)malloc(sizeof (struct node));
        newnode->data = data;
        newnode->prev = NULL;
        newnode->next = NULL;
        return (newnode);
  }


   
  void insertNode(int data) {
        struct node *temp, *ptr = createNode(data);
        
        if (!head) {
                head = ptr;
                head->next = head;
                head->prev = head;
                tail = head;
                return;
        } else {
               
                if (head->next == head && head->prev == head) {
                        temp = head;
                        ptr->next = temp;
                        ptr->prev = temp->prev;
                        temp->prev = ptr;
                        temp->next = ptr;
                        tail = ptr;
                } else {
               
                        temp = head->next;
                        ptr->next = temp;
                        ptr->prev = temp->prev;
                        temp->prev->next = ptr;
                        temp->prev = ptr;
                }
        }
  }


  void deleteNode(int data) {
        struct node *ptr, *temp = head;
    
        if (head == NULL) {
                printf("Data unavailable\n");
                return;
        } else if (temp->data == data) {
               
                if (head == tail) {
                        temp->prev = NULL;
                        temp->next = NULL;
                        free(temp);
                        head = tail = NULL;
                } else {
                        temp->next->prev = tail;
                        tail->next = temp->next;
                        head = temp->next;
                        temp->next = temp->prev = NULL;
                        free(temp);
                }
        } else {
                while (temp->next != head && temp->data != data) {
                        ptr = temp;
                        temp = temp->next;
                }
                if (temp->next == head && temp->data != data) {
                        printf("Given data unvavailable in list\n");
                        return;
                } else if (temp->next != head && temp->data == data) {
                        /* deleting any node in between head & tail */
                        ptr->next = temp->next;
                        temp->next->prev = temp->prev;
                        temp->next = NULL;
                        temp->prev = NULL;
                        free(temp);
                        printf("Data deleted successfully\n");
                } else if (temp->next == head && temp->data == data) {
                        /* deleting the tail node */
                        ptr->next = temp->next;
                        temp->next->prev = ptr;
                        tail = ptr;
                        free(temp);
                        printf("Data deleted successfully\n");
                }
        }
  }


  void traverse() {
        struct node *temp = head;
        int i = 0;
        while (temp) {
                printf("%-3d\t", temp->data);
                if (temp->next == head)
                        break;
                temp = temp->next;
                i++;
        }
        printf("\n");
  }

  int main() {
        int ch, data;
        while (1) {
                printf("1.Insertion\n");
		printf("2.Deletion\n");
                printf("3.Traverse\n");
		printf("\n4.Exit");
                printf("Enter ur choice:");
                scanf("%d", &ch);
                switch (ch) {
                        case 1:
                                printf("Enter data to insert:");
                                scanf("%d", &data);
                                insertNode(data);
				getch();
                                break;
                        case 2:
                                printf("Enter data to delete:");
                                scanf("%d", &data);
                                deleteNode(data);
				getch();
                                break;
                        case 3:
                                traverse();
				getch();
                                break;
                        case 4:
                                exit(0);
                        default:
                                printf("please enter right option\n");
                                break;
                }
        }
        return 0;
  }
